package com.Cart.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.hibernate.validator.internal.util.logging.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.Cart.model.Cart;
import com.Cart.model.Items;
import com.Cart.model.WashPacks;
import com.Cart.repository.MyRepo;
import com.Cart.service.CartService;
import com.Cart.service.CartServiceImpl;

import ch.qos.logback.classic.Logger;

@RestController
@RequestMapping("/cart")
public class CartController {
	@Autowired
	CartService cartService;
	@Autowired
	MyRepo cartRepository;
	@Autowired
	RestTemplate restTemplate;
	@Autowired
	CartServiceImpl cartServiceImpl;


    //seeing all washPacks which was added by admin
	@GetMapping("/seeWP")
	public List<WashPacks> getAllWP() {
		WashPacks[] wp = restTemplate.getForObject("http://localhost:8080/admin/all/findWP", WashPacks[].class);
		return (Arrays.asList(wp));
	}
	@GetMapping("/getallcarts")
	public ResponseEntity<List<Cart>> getAllCarts() {
		return ResponseEntity.ok(cartServiceImpl.getallcarts());
	}
	@PostMapping("/addingproducttocart/{cartId}/{pack_id}")
	public ResponseEntity<Cart> addProductToCart(@PathVariable int cartId, @PathVariable String pack_id) {
	    WashPacks product = restTemplate.getForObject("http://localhost:8080/admin/all/findWP/" + pack_id, WashPacks.class);
 
	    if (product == null) {
	        return ResponseEntity.notFound().build(); // Handle case where product is not found
	    }
 
	    if (cartRepository.existsById(cartId)) {
	        Cart oldCart = cartRepository.findById(cartId);
	        List<Items> oldItems = oldCart.getItems();
	        boolean itemExists = false;
 
	        // Check if item already exists in the cart
	        for (Items item : oldItems) {
	            if (item.getPack_id().equals(pack_id)) {
	                item.setQuantity(item.getQuantity() + 1); // Increase quantity
	                itemExists = true;
	                break;
	            }
	        }
 
	        // If item doesn't exist, create a new item and associate it with the cart
	        if (!itemExists) {
	            Items newItem = new Items();
	            newItem.setPack_id(pack_id);
	            newItem.setPrice(product.getCost());
	            newItem.setName(product.getName());
	            newItem.setQuantity(1);
	            newItem.setCart(oldCart); // Set the cart reference
	            oldItems.add(newItem);
	        }
 
	        // Update cart total price
	        int totalPrice = oldItems.stream().mapToInt(i -> i.getPrice() * i.getQuantity()).sum();
	        oldCart.setPrice(totalPrice);
	        return new ResponseEntity<>(cartRepository.save(oldCart), HttpStatus.OK);
	    } else {
	        // Create a new cart if it doesn't exist
	        Cart newCart = new Cart();
	        newCart.setCartId(cartId);
 
	        Items newItem = new Items();
	        newItem.setPack_id(pack_id);
	        newItem.setPrice(product.getCost());
	        newItem.setName(product.getName());
	        newItem.setQuantity(1);
	        newItem.setCart(newCart); // Set the cart reference
 
	        List<Items> itemsList = new ArrayList<>();
	        itemsList.add(newItem);
	        newCart.setItems(itemsList);
	        newCart.setPrice(newItem.getPrice()); // Set initial price
 
	        return new ResponseEntity<>(cartRepository.save(newCart), HttpStatus.CREATED);
	    }
	}
    //Getting Cart bY id
	@GetMapping("/{cartId}")
	public ResponseEntity<Cart> getCartById(@PathVariable int cartId) {
		return new ResponseEntity<>(cartServiceImpl.getCartById(cartId), HttpStatus.CREATED);
	}

    //Deleting Item from cart
    @PutMapping("/delete/item/{pack_id}/{cartId}")
	public Cart deleteCartItem(@PathVariable int cartId, @PathVariable String pack_id) {
		//WashPacks product = restTemplate.getForObject("http://admin/admins/all/findWP/" + pack_id, WashPacks.class);
		Cart cart2 = cartServiceImpl.getCartById(cartId);
		List<Items> list = new ArrayList<>();
		list = cart2.getItems();
		System.out.println(list);
		list.removeIf(i -> (i.getPack_id().equals(pack_id)));
		cart2.setItems(list);
		int price = 0;
		for (Items i : list) {
			price = price + i.getPrice() * i.getQuantity();

		}
		cart2.setPrice(price);
		return cartServiceImpl.updateCart(cart2.getCartId(), cart2);
	}
    //increasing Quantity in cart
	@PutMapping("/increaseQuant/{pack_id}/{cartId}")
	public Cart increaseItem(@PathVariable String pack_id, @PathVariable int cartId) {
		Cart cart = cartServiceImpl.getCartById(cartId);

		List<Items> oldItem3 = cart.getItems();

		for (Items i : oldItem3) {

			if ((i.getPack_id()).equals(pack_id))
			{
				System.out.println("3");
				int q=(i.getQuantity())+1;
				i.setQuantity(q);
				System.out.println(q);

			}
		}
		int price = 0;
		for (Items i : oldItem3) {
			price = price + i.getPrice() * i.getQuantity();

		}
		cart.setPrice(price);
		return cartServiceImpl.updateCart(cartId, cart);
	}
    //decreasing Quantity By Item_id and Cart_Id
	@PutMapping("/decreaseQuant/{pack_id}/{cartId}")
	public Cart decreaseItem(@PathVariable String pack_id, @PathVariable int cartId) {
		Cart cart = cartServiceImpl.getCartById(cartId);
		List<Items> oldItem3 = cart.getItems();
		for (Items i : oldItem3) {
			if (i.getPack_id().equals(pack_id))
			{
				i.setQuantity(i.getQuantity() - 1);
			}
		}
		int price = 0;
		for (Items i : oldItem3) {
			price = price + i.getPrice() * i.getQuantity();
		}
		cart.setPrice(price);
		return cartServiceImpl.updateCart(cartId, cart);

	}

    //deleting Cart By Id
	@DeleteMapping("/delete/{cartId}")
	public void deleteCart(@PathVariable int cartId) {
		cartServiceImpl.deleteCartById(cartId);
	}
	
	@GetMapping("/getTotalPrice/{cartId}")
	public int getTotalPrice(@PathVariable int cartId) {
		Cart c=cartRepository.findById(cartId);
		return c.getPrice();
		
	}
	
	@PostMapping("/makePayment/{cartId}")
	public String makePayment(@PathVariable int cartId) {
		restTemplate.postForLocation(, )
		return "Payment made Successfully";
		
	}

	
}