package com.customer.testing;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import com.customer.contoller.CustomerController;
import com.customer.exception.CustomerDoNotExistException;
import com.customer.model.CustomerDetails;
import com.customer.service.CustomerService;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;


import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;

@WebMvcTest(CustomerController.class)
public class CustomerDeleteApiTester {

    private MockMvc mockMvc;

    @MockBean
    private CustomerService customerService;
    
    @InjectMocks
    private CustomerController customerController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = standaloneSetup(customerController).build();
    }

    @Test
    public void testDeleteCustomer_Success() throws Exception {

        // Mock the customer details
        CustomerDetails customer = new CustomerDetails(1, "test1@gmail.com", "First User", "6666666666");
        
        // Mock the service call for finding customer by ID
        when(customerService.findCustomersById(999)).thenReturn(customer);

        // Perform DELETE request and validate response
        mockMvc.perform(delete("/customer/delete/999")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());  // Expect 204 No Content

        // Verify that deleteCustomer() was called with the correct ID
        verify(customerService, times(1)).deleteCustomer(999);
    }


//    @Test
//    public void testDeleteCustomer_NotFound() throws Exception {
//
//        // Mock the service to throw CustomerDoNotExistException when the customer is not found
//        doThrow(new CustomerDoNotExistException("Customer not found"))
//                .when(customerService).deleteCustomer(999);
//
//        // Perform DELETE request and expect 404 Not Found
//        mockMvc.perform(delete("/customer/delete/999")
//                .contentType(MediaType.APPLICATION_JSON))
//                .andExpect(status().isNotFound())  // Expect 404 Not Found
//                .andExpect(content().string("Customer not found"));  // Expect the error message
//    }


}
